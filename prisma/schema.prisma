generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  expense       Expense[]
  sessions      Session[]
  category      Category[]
  investment    Investment[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Expense {
  id          String    @id @default(uuid())
  amount      Float?
  description String?
  date        DateTime  @db.Date
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?   @map("category_id")
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("expense")
}

enum CategoryType {
  INVESTMENT
  EXPENSE
}

model Category {
  id         String       @id @default(uuid())
  name       String
  color      String
  type       CategoryType
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime?    @map("updated_at")
  userId     String       @map("user_id")
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  expense    Expense[]
  investment Investment[]

  @@unique([type, name, userId])
  @@map("category")
}

model Investment {
  id           String    @id @default(uuid())
  contribution Float?
  totalValue   Float?    @map("total_value")
  date         DateTime  @db.Date
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  userId       String    @map("user_id")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId   String?   @map("category_id")
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("investment")
}
